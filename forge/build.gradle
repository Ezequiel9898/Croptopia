plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev'
    //id 'org.spongepowered.mixin'
    id 'com.github.johnrengelman.shadow' version '8.0.0'
}

//apply plugin: 'org.spongepowered.mixin'

repositories {
    mavenLocal()
    maven {
        url = 'https://maven.blamejared.com'
    }
}

version = project.mod_version
group = project.maven_group
archivesBaseName = archives_base_name + "-" + mc_ver + "-NEO-FORGE"

configurations {
    shade
    compileOnly.extendsFrom shade
    compileOnly.extendsFrom shadeSource
}

jarJar {

    disable(true)
}


/*mixin {
    add sourceSets.main, "croptopia.refmap.json"
    config "croptopia.mixins.json"
}*/

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated",
                    rootProject.sourceSets.main.resources
            ]
        }
    }
}

base {
    archivesName = archivesBaseName
}

runs {
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource(sourceSets.main)
        modSource(rootProject.sourceSets.main)
    }
    client {

    }
}

/*neoForge {
    version = neo_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    //mappings channel: 'official', version: "${mc_ver}"
    //copyIdeResources = true
    //mappings channel: 'parchment', version: "${project.parchmentVersion}-${project.mc_ver}"

    *//*runs {
        client {
            workingDirectory project.file('run')
            property 'legacyClassPath', '{minecraft_classpath}'
            arg "-mixin.config=croptopia.mixins.json"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console //property 'forge.logging.console.level', 'debug'
            args '--mod', 'croptopia', '--all', '--output', file('src/generated/resources/'), '--existing', rootProject.file('src/main/resources/')
            mods {
                croptopia {
                    sources(sourceSets.main, rootProject.sourceSets.main)
                }
            }
        }

        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            mods {
                croptopia {
                    sources(sourceSets.main, rootProject.sourceSets.main)
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'legacyClassPath', '{minecraft_classpath}'
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'croptopia', '--all', '--output', file('src/generated/resources/'), '--existing', rootProject.file('src/main/resources/')
            mods {
                croptopia {
                    sources(sourceSets.main, rootProject.sourceSets.main)
                }
            }
        }
    }*//*
}*/

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    //from(sourceSets.main.resources.srcDirs) {
    //    include('**/data/croptopia/recipes/**')
    //    expand "dependent": "forge"
    //}

    from(sourceSets.main.resources.srcDirs) {
        include('**/data/**')
        include('**/dependents/**')
        expand "dependent": "forge"
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}


dependencies {
    //minecraft "net.minecraftforge:forge:${mc_ver}-${forge_ver}"
    implementation "net.neoforged:neoforge:${neo_version}"
    compileOnly(rootProject)
    implementation(rootProject)
    shade(rootProject)
    //implementation fg.deobf("vazkii.patchouli:Patchouli:1.20.1-80-FORGE")
    implementation ('com.epherical.epherolib:EpheroLib-forge:1.2.0-1.21')
    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
}

shadowJar {
    archiveClassifier = ""
    enabled = true
    configurations = [project.configurations.shade]
    //archiveFileName = rootProject.archives_base_name + "-${project.mc_ver}-FORGE-${rootProject.version}.jar"
    //destinationDirectory = new File("${rootProject.projectDir}/build/jars")
    relocate 'dependents/platform', 'data/forge'
}

artifacts {
    archives shadowJar
    shadow shadowJar
}

jar {
    //archiveFileName = rootProject.archives_base_name + "-${project.mc_ver}-FORGE-${rootProject.version}.jar"
    //destinationDirectory = new File("${rootProject.projectDir}/build/jars")
    manifest {
        attributes([
                "Specification-Title": "croptopia",
                "Specification-Vendor": "thonk",
                "Specification-Version": "1",
                "Implementation-Title": "${archives_base_name}",
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"me thonk",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "croptopia.mixins.json"
        ])
    }
}


tasks.build.dependsOn(tasks.shadowJar)

/*reobf {
    shadowJar {}
}*/

/*jar.finalizedBy('reobfJar')
shadowJar.dependsOn('reobfJar')*/

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

//tasks.getByName("addRefMapToShadowJar").mustRunAfter(task("shadowJar"))

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${archives_base_name}-" + artifactId
            version = version + "-${mc_ver}"
            // add all the jars that should be included when publishing to maven
            artifact shadowJar

            artifact sourceJar
        }
    }

    repositories {
        maven {
            name = "EphericalMaven"
            url = "https://maven.epherical.com/releases"
            credentials {
                username = m_user
                password = m_pass
            }
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
